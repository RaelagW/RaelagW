#include <iostream>

using namespace std;

class priorityQueue{
private:
    class Node{
        public:
        int data;
        int priority;
        Node *next;

        Node(int data, int priority){
            this->data = data;
            this->next = NULL;
            this->priority = priority;
        }
    };
    Node *head;
public:

    priorityQueue(){
        head = NULL;
    }

    ~priorityQueue(){
        delete head;
        /*
        Node *cur = head, prev = NULL;
        while(temp!=NULL){
            cur = temp;
            temp = temp->next;
            delete cur;
        }
        head = NULL;
        */
    }

    bool isEmpty(){
        return head == NULL;
    }

    void pop(){
        if(isEmpty()) return;
        else{
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    int peek(){
        if(isEmpty()) return -1;else{
            return head->data;
        }
    }

    void push(int data, int p){
        if(p < 0) return;
        Node* newNode = new Node(data, p);
        if(isEmpty()){
            head = newNode;
        }else{

            if(head->priority > p){
                newNode->next = head;
                head = newNode;
            }else{
                Node*temp = head;
                while(temp->next != NULL && temp->next->priority < p){
                    temp = temp->next;
                }
                newNode->next = temp->next;
                temp->next = newNode;
            }
        }
    }

    // test
    void print(){
        if(isEmpty()) return;
        else{
            Node *temp = head;
            while(temp != NULL){
                cout << temp->data << " ";
                temp = temp->next;
            }
            cout << endl;
        }
    }
};

int main(){
    priorityQueue pq;
    pq.push(4, 1);
    pq.push(5, 2);
    pq.push(6, 3);
    pq.push(7, 0);
    pq.print();
    cout << pq.peek() << endl;
    pq.pop();
    pq.print();
    return 0;
}
